// Use DBML to define your database structure
// Docs: https://www.dbml.org/docs

Table Encounter_Campaign {
  PK_id integer [pk]
  FK_hero integer
  FK_deck integer
  type type_encounter //enum nicht sichtbar in Diagramm
  level integer
  experience_first integer
  gold_first integer
  FK_card_reward1 integer [ref: > Cards.PK_id]
  FK_card_reward2 integer [ref: > Cards.PK_id]
}

enum type_encounter {
  enc_type_1
  enc_type_2
  enc_type_3
}

Table Encounter_Random {
  // erbt ("union") von Encounter_Campaign
  experience_again integer
  gold_again integer
  FK_condition integer [ref: - Encounter_Campaign.PK_id]
}

Table Hero {
  PK_id integer [pk, ref: - Encounter_Campaign.FK_hero]
  level integer
  name  varchar (50)
  health integer
  FK_element1 varchar (50) [null, ref: - Elements.id_name]
  FK_element2 varchar (50) [null, ref: - Elements.id_name]
  //Verknüpfungen nullable -> nicht sichtbar in Diagramm
}

Table Abilities {
  PK_id integer [pk]
  content carchar (255)
}

Table Hero_Abilities {
  PK_FK_hero integer [pk, ref: < Hero.PK_id]
  PK_FK_ability integer [pk, ref: < Abilities.PK_id]
}

Table Elements {
  PK_id_char varchar (1) [pk]
  id_name varchar (50) [unique]
}

Table Cards {
  PK_id integer [pk]
  name varchar (50)
  rarity rarity //enum nicht sichtbar in Diagramm
  type type_cards //enum nicht sichtbar in Diagramm
  subtype type_cards //enum nicht sichtbar in Diagramm
  FK_element integer [ref: - Elements.id_name]
  quick bool
  cost integer
}

Table Card_Abilities {
  PK_FK_card integer [pk, ref: < Cards.PK_id]
  PK_FK_ability integer [pk, ref: < Abilities.PK_id]
}

enum type_cards {
  card_type_1
  card_type_2
  card_type_3
}

enum rarity {
  rarity_1
  rarity_2
  rarity_3
}

Table Cards_Troop {
  PK_id integer [pk, ref: < Cards.PK_id]
  //Verknüpfung falsch: 0/1 Troop pro Card
  health integer
}

Table Deck {
  PK_id integer [pk, ref: - Encounter_Campaign.FK_deck]
  PK_FK_hero integer [pk,ref: - Hero.PK_id]
  PK_FK_card integer [pk, ref: <> Cards.PK_id]
  amount integer
}